{
  "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftBoxAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "characterAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "GameCard__AlreadyOpponentFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameCard__NotOpponent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameCard__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameCard__PlayerNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameCard__PlayerNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[3]",
          "name": "tokenId",
          "type": "uint256[3]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "opponent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum GameCard.PlayerStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "AddedToList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "looser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "draw",
          "type": "bool"
        }
      ],
      "name": "Match",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "MatchBeginsSoon",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player2",
          "type": "address"
        }
      ],
      "name": "MatchFound",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "currentPlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId3",
          "type": "uint256"
        }
      ],
      "name": "enterGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "finshedGames",
      "outputs": [
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "loser",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "draw",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTokenIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_contractCharacter",
      "outputs": [
        {
          "internalType": "contract Characters",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_contractNftBox",
      "outputs": [
        {
          "internalType": "contract NftBox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "game",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "opponent",
          "type": "address"
        },
        {
          "internalType": "enum GameCard.PlayerStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_gameCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requestIdToPlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x47f3761fdfca0dc7e44b4b63ebdc40bd3bfa0e9a91627cbcb8c7417cda022424",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
    "transactionIndex": 0,
    "gasUsed": "4300301",
    "logsBloom": "0x
    "blockHash": "0xea5c957de779ab8aa3e2e4c15d5ab0b19e5d6b78d2fccd4152b3991ea4796e05",
    "transactionHash": "0x47f3761fdfca0dc7e44b4b63ebdc40bd3bfa0e9a91627cbcb8c7417cda022424",
    "logs": [],
    "blockNumber": 13,
    "cumulativeGasUsed": "4300301",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "2",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "3cb1b0f7b050af04e470d2dbfd8fd0fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftBoxAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"characterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GameCard__AlreadyOpponentFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameCard__NotOpponent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameCard__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameCard__PlayerNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameCard__PlayerNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"tokenId\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum GameCard.PlayerStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"AddedToList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"looser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"draw\",\"type\":\"bool\"}],\"name\":\"Match\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"MatchBeginsSoon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"}],\"name\":\"MatchFound\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId3\",\"type\":\"uint256\"}],\"name\":\"enterGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"finshedGames\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"draw\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_contractCharacter\",\"outputs\":[{\"internalType\":\"contract Characters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_contractNftBox\",\"outputs\":[{\"internalType\":\"contract NftBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"game\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"},{\"internalType\":\"enum GameCard.PlayerStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_gameCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requestIdToPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GameCard.sol\":\"GameCard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Characters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ncontract Characters {\\r\\n    struct Person {\\r\\n        string tokenUri;\\r\\n        uint256 attack;\\r\\n        uint256 defence;\\r\\n        uint256 tactics;\\r\\n    }\\r\\n    Person[] public normalPersons;\\r\\n    Person[] public rarePersons;\\r\\n    Person[] public legendaryPersons;\\r\\n\\r\\n    constructor(\\r\\n        string[] memory tokenUriNormal,\\r\\n        uint256[][] memory normalStats,\\r\\n        string[] memory tokenUriRare,\\r\\n        uint256[][] memory statsRare,\\r\\n        string[] memory tokenUriLegendary,\\r\\n        uint256[][] memory statsLegendary\\r\\n    ) {\\r\\n        for (uint256 i = 0; i < tokenUriNormal.length; i++) {\\r\\n            normalPersons.push(\\r\\n                Person(\\r\\n                    tokenUriNormal[i],\\r\\n                    normalStats[i][0],\\r\\n                    normalStats[i][1],\\r\\n                    normalStats[i][2]\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        for (uint256 i = 0; i < tokenUriRare.length; i++) {\\r\\n            rarePersons.push(\\r\\n                Person(\\r\\n                    tokenUriRare[i],\\r\\n                    statsRare[i][0],\\r\\n                    statsRare[i][1],\\r\\n                    statsRare[i][2]\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        for (uint256 i = 0; i < tokenUriLegendary.length; i++) {\\r\\n            legendaryPersons.push(\\r\\n                Person(\\r\\n                    tokenUriLegendary[i],\\r\\n                    statsLegendary[i][0],\\r\\n                    statsLegendary[i][1],\\r\\n                    statsLegendary[i][2]\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function normalPersonsLength() public view returns (uint256) {\\r\\n        return normalPersons.length;\\r\\n    }\\r\\n\\r\\n    function rarePersonsLength() public view returns (uint256) {\\r\\n        return rarePersons.length;\\r\\n    }\\r\\n\\r\\n    function legendaryPersonsLength() public view returns (uint256) {\\r\\n        return legendaryPersons.length;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x71a420f0a5c1366bf3dfdcadb6bcb3bc6b08d0e12ee369b43be791374bf734e2\",\"license\":\"MIT\"},\"contracts/GameCard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\nimport \\\"./NftBox.sol\\\";\\r\\nimport \\\"./Characters.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nerror GameCard__NotOwner();\\r\\nerror GameCard__PlayerNotFound();\\r\\nerror GameCard__PlayerNotAllowed();\\r\\nerror GameCard__NotOpponent();\\r\\nerror GameCard__AlreadyOpponentFound();\\r\\n\\r\\ncontract GameCard is VRFConsumerBaseV2 {\\r\\n    enum PlayerStatus {\\r\\n        SEARCHING,\\r\\n        FOUND,\\r\\n        PLAYING,\\r\\n        OVER\\r\\n    }\\r\\n    struct Player {\\r\\n        uint256 game;\\r\\n        address player;\\r\\n        uint256[3] tokenIdArray;\\r\\n        address opponent;\\r\\n        PlayerStatus status;\\r\\n    }\\r\\n    struct Game {\\r\\n        address winner;\\r\\n        address loser;\\r\\n        bool draw;\\r\\n    }\\r\\n    event MatchFound(address player1, address player2);\\r\\n    event Match(address winner, address looser, bool draw);\\r\\n    event AddedToList(\\r\\n        address caller,\\r\\n        uint256[3] tokenId,\\r\\n        address opponent,\\r\\n        PlayerStatus status\\r\\n    );\\r\\n    event MatchBeginsSoon(address player1, address player2, uint256 requestId);\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private constant NUM_WORDS = 3;\\r\\n    mapping(address => Player) public s_addressInfo;\\r\\n    mapping(uint256 => address[2]) public s_requestIdToPlayers;\\r\\n    address[] public currentPlayers;\\r\\n    NftBox public i_contractNftBox;\\r\\n    address private immutable i_nftAddress;\\r\\n    address private immutable i_characterAddress;\\r\\n\\r\\n    Characters public i_contractCharacter;\\r\\n    uint256 public s_gameCounter;\\r\\n    mapping(uint256 => Game) public finshedGames;\\r\\n    modifier checkPlayers(address player1, address player2) {\\r\\n        if (\\r\\n            s_addressInfo[player1].player != player1 ||\\r\\n            s_addressInfo[player2].player != player2\\r\\n        ) {\\r\\n            revert GameCard__PlayerNotFound();\\r\\n        }\\r\\n        if (\\r\\n            (s_addressInfo[player1].status != PlayerStatus.FOUND) ||\\r\\n            (s_addressInfo[player2].status != PlayerStatus.FOUND)\\r\\n        ) {\\r\\n            revert GameCard__PlayerNotAllowed();\\r\\n        }\\r\\n        if (\\r\\n            s_addressInfo[player1].opponent != player2 ||\\r\\n            s_addressInfo[player2].opponent != player1\\r\\n        ) {\\r\\n            revert GameCard__NotOpponent();\\r\\n        }\\r\\n        _; /* this indicates that the rest of the main function will be run  */\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address nftBoxAddress,\\r\\n        address characterAddress,\\r\\n        address vrfCoordinatorV2,\\r\\n        uint64 subscriptionId,\\r\\n        bytes32 gasLane,\\r\\n        uint32 callbackGasLimit\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_contractNftBox = NftBox(nftBoxAddress);\\r\\n        i_nftAddress = nftBoxAddress;\\r\\n        i_characterAddress = characterAddress;\\r\\n        i_contractCharacter = Characters(characterAddress);\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_gasLane = gasLane;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        s_gameCounter = 0;\\r\\n    }\\r\\n\\r\\n    function enterGame(\\r\\n        uint256 tokenId1,\\r\\n        uint256 tokenId2,\\r\\n        uint256 tokenId3\\r\\n    ) public {\\r\\n        IERC721 nft = IERC721(i_nftAddress);\\r\\n        (, , bool opened1, ) = i_contractNftBox.mappingNfts(tokenId1);\\r\\n        (, , bool opened2, ) = i_contractNftBox.mappingNfts(tokenId2);\\r\\n        (, , bool opened3, ) = i_contractNftBox.mappingNfts(tokenId3);\\r\\n        if (\\r\\n            nft.ownerOf(tokenId1) != msg.sender ||\\r\\n            !opened1 ||\\r\\n            tokenId1 == tokenId2 ||\\r\\n            tokenId2 == tokenId3 ||\\r\\n            tokenId3 == tokenId1\\r\\n        ) {\\r\\n            revert GameCard__NotOwner();\\r\\n        }\\r\\n\\r\\n        if (nft.ownerOf(tokenId2) != msg.sender || !opened2) {\\r\\n            revert GameCard__NotOwner();\\r\\n        }\\r\\n\\r\\n        if (nft.ownerOf(tokenId3) != msg.sender || !opened3) {\\r\\n            revert GameCard__NotOwner();\\r\\n        }\\r\\n        if (s_addressInfo[msg.sender].status == PlayerStatus.FOUND) {\\r\\n            revert GameCard__AlreadyOpponentFound();\\r\\n        }\\r\\n        if (currentPlayers.length == 0) {\\r\\n            currentPlayers.push(msg.sender);\\r\\n            s_addressInfo[msg.sender] = Player(\\r\\n                s_gameCounter,\\r\\n                msg.sender,\\r\\n                [tokenId1, tokenId2, tokenId3],\\r\\n                0x0000000000000000000000000000000000000000,\\r\\n                PlayerStatus.SEARCHING\\r\\n            );\\r\\n            emit AddedToList(\\r\\n                msg.sender,\\r\\n                [tokenId1, tokenId2, tokenId3],\\r\\n                0x0000000000000000000000000000000000000000,\\r\\n                PlayerStatus.SEARCHING\\r\\n            );\\r\\n            s_gameCounter++;\\r\\n        } else {\\r\\n            address opponent = currentPlayers[0];\\r\\n            if (opponent == msg.sender) {\\r\\n                revert GameCard__PlayerNotAllowed();\\r\\n            }\\r\\n            Player memory opponentStruct = s_addressInfo[opponent];\\r\\n\\r\\n            s_addressInfo[opponent] = Player(\\r\\n                opponentStruct.game,\\r\\n                opponent,\\r\\n                opponentStruct.tokenIdArray,\\r\\n                msg.sender,\\r\\n                PlayerStatus.FOUND\\r\\n            );\\r\\n            s_addressInfo[msg.sender] = Player(\\r\\n                opponentStruct.game,\\r\\n                msg.sender,\\r\\n                [tokenId1, tokenId2, tokenId3],\\r\\n                opponent,\\r\\n                PlayerStatus.FOUND\\r\\n            );\\r\\n            for (uint256 i = 0; i < currentPlayers.length; i++) {\\r\\n                if (currentPlayers[i] == opponent) {\\r\\n                    for (uint256 j = i; j < currentPlayers.length - 1; j++) {\\r\\n                        currentPlayers[j] = currentPlayers[j + 1];\\r\\n                    }\\r\\n                    currentPlayers.pop();\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            emit MatchFound(msg.sender, opponent);\\r\\n            playGame(msg.sender, opponent);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function playGame(\\r\\n        address player1Address,\\r\\n        address player2Address\\r\\n    )\\r\\n        private\\r\\n        checkPlayers(player1Address, player2Address)\\r\\n        returns (uint256 requestId)\\r\\n    {\\r\\n        // Get Player1 Data of TokenId\\r\\n        //We get the tokenUri and the\\r\\n        Player memory player1 = s_addressInfo[player1Address];\\r\\n        Player memory player2 = s_addressInfo[player2Address];\\r\\n\\r\\n        s_addressInfo[player1Address] = Player(\\r\\n            player1.game,\\r\\n            player1Address,\\r\\n            player1.tokenIdArray,\\r\\n            player2Address,\\r\\n            PlayerStatus.PLAYING\\r\\n        );\\r\\n        s_addressInfo[player2Address] = Player(\\r\\n            player1.game,\\r\\n            player2Address,\\r\\n            player2.tokenIdArray,\\r\\n            player1Address,\\r\\n            PlayerStatus.PLAYING\\r\\n        );\\r\\n        requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        s_requestIdToPlayers[requestId] = [player1Address, player2Address];\\r\\n        emit MatchBeginsSoon(player1Address, player2Address, requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 requestId,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override {\\r\\n        address[2] memory players = s_requestIdToPlayers[requestId];\\r\\n        Characters.Person[3] memory player1Characters = getCharacter(\\r\\n            players[0]\\r\\n        );\\r\\n        Characters.Person[3] memory player2Characters = getCharacter(\\r\\n            players[1]\\r\\n        );\\r\\n\\r\\n        s_addressInfo[players[0]] = Player(\\r\\n            s_addressInfo[players[0]].game,\\r\\n            players[0],\\r\\n            s_addressInfo[players[0]].tokenIdArray,\\r\\n            players[1],\\r\\n            PlayerStatus.OVER\\r\\n        );\\r\\n        s_addressInfo[players[1]] = Player(\\r\\n            s_addressInfo[players[1]].game,\\r\\n            players[1],\\r\\n            s_addressInfo[players[1]].tokenIdArray,\\r\\n            players[0],\\r\\n            PlayerStatus.OVER\\r\\n        );\\r\\n        // Round 1\\r\\n        uint256 removedIndex = randomWords[0] % 3;\\r\\n\\r\\n        uint256 player1Points = 0;\\r\\n        uint256 player2Points = 0;\\r\\n        player1Points = 0;\\r\\n        player2Points = 0;\\r\\n        if (\\r\\n            player1Characters[removedIndex].attack >\\r\\n            player2Characters[removedIndex].attack\\r\\n        ) {\\r\\n            player1Points++;\\r\\n        } else if (\\r\\n            player1Characters[removedIndex].attack <\\r\\n            player2Characters[removedIndex].attack\\r\\n        ) {\\r\\n            player2Points++;\\r\\n        } else {\\r\\n            player1Points++;\\r\\n            player2Points++;\\r\\n        }\\r\\n        uint256 game = s_addressInfo[s_requestIdToPlayers[requestId][0]].game;\\r\\n        // Remove character from the array\\r\\n        Characters.Person[2] memory player1Characters2;\\r\\n        Characters.Person[2] memory player2Characters2;\\r\\n        for (uint256 i = 0; i < 3; i++) {\\r\\n            if (i == removedIndex) {\\r\\n                continue;\\r\\n            } else if (i < removedIndex) {\\r\\n                player1Characters2[i] = player1Characters[i];\\r\\n                player2Characters2[i] = player2Characters[i];\\r\\n            } else {\\r\\n                player1Characters2[i - 1] = player1Characters[i];\\r\\n                player2Characters2[i - 1] = player2Characters[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            player1Characters2[randomWords[1] % 2].defence >\\r\\n            player2Characters2[randomWords[1] % 2].defence\\r\\n        ) {\\r\\n            player1Points++;\\r\\n        } else if (\\r\\n            player1Characters2[randomWords[1] % 2].defence <\\r\\n            player2Characters2[randomWords[1] % 2].defence\\r\\n        ) {\\r\\n            player2Points++;\\r\\n        } else {\\r\\n            player1Points++;\\r\\n            player2Points++;\\r\\n        }\\r\\n\\r\\n        // Remove character from the array\\r\\n        Characters.Person[1] memory player1Characters1;\\r\\n        Characters.Person[1] memory player2Characters1;\\r\\n        for (uint256 i = 0; i < 2; i++) {\\r\\n            if (i == randomWords[1] % 2) {\\r\\n                continue;\\r\\n            } else if (i < randomWords[1] % 2) {\\r\\n                player1Characters1[i] = player1Characters2[i];\\r\\n                player2Characters1[i] = player2Characters2[i];\\r\\n            } else {\\r\\n                player1Characters1[i - 1] = player1Characters2[i];\\r\\n                player2Characters1[i - 1] = player2Characters2[i];\\r\\n            }\\r\\n        }\\r\\n        // Because of the stack is too deep\\r\\n        address player1Address = players[0];\\r\\n        address player2Address = players[1];\\r\\n\\r\\n        // Round 3\\r\\n        if (player1Characters1[0].tactics > player2Characters1[0].tactics) {\\r\\n            player1Points++;\\r\\n        } else if (\\r\\n            player1Characters1[0].tactics < player2Characters1[0].tactics\\r\\n        ) {\\r\\n            player2Points++;\\r\\n        } else {\\r\\n            player1Points++;\\r\\n            player2Points++;\\r\\n        }\\r\\n\\r\\n        (address winner, address loser, bool draw) = getResult(\\r\\n            player1Address,\\r\\n            player1Points,\\r\\n            player2Address,\\r\\n            player2Points,\\r\\n            game\\r\\n        );\\r\\n\\r\\n        emit Match(winner, loser, draw);\\r\\n    }\\r\\n\\r\\n    function getResult(\\r\\n        address player1,\\r\\n        uint256 player1Points,\\r\\n        address player2,\\r\\n        uint256 player2Points,\\r\\n        uint256 game\\r\\n    ) private returns (address, address, bool) {\\r\\n        if (player1Points > player2Points) {\\r\\n            finshedGames[game] = Game(player1, player2, false);\\r\\n            return (player1, player2, false);\\r\\n        } else if (player2Points > player1Points) {\\r\\n            finshedGames[game] = Game(player2, player1, false);\\r\\n            return (player2, player1, false);\\r\\n        } else {\\r\\n            finshedGames[game] = Game(player1, player2, true);\\r\\n            return (\\r\\n                0x0000000000000000000000000000000000000000,\\r\\n                0x0000000000000000000000000000000000000000,\\r\\n                true\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getCharacter(\\r\\n        address player\\r\\n    ) private returns (Characters.Person[3] memory) {\\r\\n        uint256[3] memory player1TokenArray = s_addressInfo[player]\\r\\n            .tokenIdArray;\\r\\n        (\\r\\n            ,\\r\\n            string memory player1tokenId1Uri,\\r\\n            ,\\r\\n            uint256 player1tokenId1BoxType\\r\\n        ) = i_contractNftBox.mappingNfts(player1TokenArray[0]);\\r\\n        (\\r\\n            ,\\r\\n            string memory player1tokenId2Uri,\\r\\n            ,\\r\\n            uint256 player1tokenId2BoxType\\r\\n        ) = i_contractNftBox.mappingNfts(player1TokenArray[1]);\\r\\n        (\\r\\n            ,\\r\\n            string memory player1tokenId3Uri,\\r\\n            ,\\r\\n            uint256 player1tokenId3BoxType\\r\\n        ) = i_contractNftBox.mappingNfts(player1TokenArray[2]);\\r\\n\\r\\n        Characters.Person memory character1 = getData(\\r\\n            player1tokenId1BoxType,\\r\\n            player1tokenId1Uri\\r\\n        );\\r\\n        Characters.Person memory character2 = getData(\\r\\n            player1tokenId2BoxType,\\r\\n            player1tokenId2Uri\\r\\n        );\\r\\n        Characters.Person memory character3 = getData(\\r\\n            player1tokenId3BoxType,\\r\\n            player1tokenId3Uri\\r\\n        );\\r\\n        Characters.Person[3] memory array = [\\r\\n            character1,\\r\\n            character2,\\r\\n            character3\\r\\n        ];\\r\\n        return array;\\r\\n    }\\r\\n\\r\\n    function getData(\\r\\n        uint256 boxType,\\r\\n        string memory tokenUri\\r\\n    ) private returns (Characters.Person memory) {\\r\\n        if (boxType == 0) {\\r\\n            for (\\r\\n                uint256 i = 0;\\r\\n                i < i_contractCharacter.normalPersonsLength();\\r\\n                i++\\r\\n            ) {\\r\\n                (string memory tokenUriLoop, , , ) = i_contractCharacter\\r\\n                    .normalPersons(i);\\r\\n                if (\\r\\n                    keccak256(abi.encodePacked(tokenUriLoop)) ==\\r\\n                    keccak256(abi.encodePacked(tokenUri))\\r\\n                ) {\\r\\n                    (\\r\\n                        string memory tokenUri,\\r\\n                        uint256 strength,\\r\\n                        uint256 dexterity,\\r\\n                        uint256 intellect\\r\\n                    ) = i_contractCharacter.normalPersons(i);\\r\\n\\r\\n                    Characters.Person memory character = Characters.Person({\\r\\n                        tokenUri: tokenUri,\\r\\n                        attack: strength,\\r\\n                        defence: dexterity,\\r\\n                        tactics: intellect\\r\\n                    });\\r\\n                    return character;\\r\\n                }\\r\\n            }\\r\\n        } else if (boxType == 1) {\\r\\n            for (\\r\\n                uint256 i = 0;\\r\\n                i < i_contractCharacter.rarePersonsLength();\\r\\n                i++\\r\\n            ) {\\r\\n                (string memory tokenUriLoop, , , ) = i_contractCharacter\\r\\n                    .rarePersons(i);\\r\\n                if (\\r\\n                    keccak256(abi.encodePacked(tokenUriLoop)) ==\\r\\n                    keccak256(abi.encodePacked(tokenUri))\\r\\n                ) {\\r\\n                    (\\r\\n                        string memory tokenUri,\\r\\n                        uint256 strength,\\r\\n                        uint256 dexterity,\\r\\n                        uint256 intellect\\r\\n                    ) = i_contractCharacter.rarePersons(i);\\r\\n\\r\\n                    Characters.Person memory character = Characters.Person({\\r\\n                        tokenUri: tokenUri,\\r\\n                        attack: strength,\\r\\n                        defence: dexterity,\\r\\n                        tactics: intellect\\r\\n                    });\\r\\n                    return character;\\r\\n                }\\r\\n            }\\r\\n        } else if (boxType == 2) {\\r\\n            for (\\r\\n                uint256 i = 0;\\r\\n                i < i_contractCharacter.legendaryPersonsLength();\\r\\n                i++\\r\\n            ) {\\r\\n                (string memory tokenUriLoop, , , ) = i_contractCharacter\\r\\n                    .legendaryPersons(i);\\r\\n                if (\\r\\n                    keccak256(abi.encodePacked(tokenUriLoop)) ==\\r\\n                    keccak256(abi.encodePacked(tokenUri))\\r\\n                ) {\\r\\n                    (\\r\\n                        string memory tokenUri,\\r\\n                        uint256 strength,\\r\\n                        uint256 dexterity,\\r\\n                        uint256 intellect\\r\\n                    ) = i_contractCharacter.legendaryPersons(i);\\r\\n\\r\\n                    Characters.Person memory character = Characters.Person({\\r\\n                        tokenUri: tokenUri,\\r\\n                        attack: strength,\\r\\n                        defence: dexterity,\\r\\n                        tactics: intellect\\r\\n                    });\\r\\n                    return character;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getCurrentPlayers() public view returns (uint256) {\\r\\n        return currentPlayers.length;\\r\\n    }\\r\\n\\r\\n    function getTokenIds(\\r\\n        address user,\\r\\n        uint256 index\\r\\n    ) public view returns (uint256) {\\r\\n        return s_addressInfo[user].tokenIdArray[index];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x436b1b00cc1c48320da2a5762e92f1a8afd34d9dfadd434e6be23b7fdea8d6bc\",\"license\":\"MIT\"},\"contracts/NftBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nimport \\\"./Characters.sol\\\";\\r\\n\\r\\nerror NftBox__NeedMoreETHSent();\\r\\nerror NftBox__NotOwner();\\r\\nerror NftBox__TokenIdNotExist();\\r\\nerror NftBox__AlreadyOpened();\\r\\nerror NftBox__TransferFailed();\\r\\nerror NftBox__NotNftAddressCalling();\\r\\n\\r\\ncontract NftBox is VRFConsumerBaseV2, ERC721URIStorage, Ownable {\\r\\n    Characters public i_charactersContract;\\r\\n    // Trade Nft Address for the setMapping\\r\\n    address public tradeNftAddress;\\r\\n    //TokenCounter\\r\\n    uint256 private s_tokenCounter;\\r\\n    //3 Types Of Boxes with their TokenUri\\r\\n    string[] private NftBoxesUri;\\r\\n    //Card Uris\\r\\n    //Nft\\r\\n    struct Nft {\\r\\n        uint256 tokenId;\\r\\n        string tokenUri;\\r\\n        bool Boxopened;\\r\\n        uint256 boxType /* 0 -> normal; 1-> rare; 2 -> legendary*/;\\r\\n    }\\r\\n\\r\\n    //Price Boxes\\r\\n    uint256 public constant PRICE_NORMAL_BOX_USD = 10;\\r\\n    uint256 public constant PRICE_RARE_BOX_USD = 50;\\r\\n    uint256 public constant PRICE_LEGENDARY_BOX_USD = 100;\\r\\n    // Random Request for the NFt Card\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n    //Price Feed\\r\\n    AggregatorV3Interface private immutable i_priceFeed;\\r\\n    //mappings\\r\\n    mapping(uint256 => Nft) public mappingNfts;\\r\\n    mapping(uint256 => uint256) public mappingRequestToToken;\\r\\n\\r\\n    //Events\\r\\n    event NormalBoxMinted(\\r\\n        address owner,\\r\\n        uint256 tokenId,\\r\\n        string tokenUri,\\r\\n        uint256 price\\r\\n    );\\r\\n    event RareBoxMinted(\\r\\n        address owner,\\r\\n        uint256 tokenId,\\r\\n        string tokenUri,\\r\\n        uint256 price\\r\\n    );\\r\\n    event LegendaryBoxMinted(\\r\\n        address owner,\\r\\n        uint256 tokenId,\\r\\n        string tokenUri,\\r\\n        uint256 price\\r\\n    );\\r\\n    event OpenBoxRandomRequested(uint256 requestId, address sender);\\r\\n    event BoxOpened(address owner, uint256 tokenId, string tokenUri);\\r\\n    //modifiers\\r\\n    modifier isOwner(uint256 tokenId, address spender) {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        if (spender != owner) {\\r\\n            revert NftBox__NotOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n    modifier tokenIdExists(address owner, uint256 tokenId) {\\r\\n        bool success = _exists(tokenId);\\r\\n        if (!success) {\\r\\n            revert NftBox__TokenIdNotExist();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2,\\r\\n        uint64 subscriptionId,\\r\\n        bytes32 gasLane,\\r\\n        uint32 callbackGasLimit,\\r\\n        string[3] memory boxesUri,\\r\\n        address priceFeedAddress,\\r\\n        address charactersAddress\\r\\n    )\\r\\n        ERC721(\\\"CardBoxes\\\", \\\"CABO\\\")\\r\\n        VRFConsumerBaseV2(vrfCoordinatorV2)\\r\\n        Ownable()\\r\\n    {\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_gasLane = gasLane;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        NftBoxesUri = boxesUri;\\r\\n        i_priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n        s_tokenCounter = 0;\\r\\n        i_charactersContract = Characters(charactersAddress);\\r\\n    }\\r\\n\\r\\n    function buyNormalBox() public payable {\\r\\n        uint256 usdPriceInEth = priceFeedUsdToEth(PRICE_NORMAL_BOX_USD);\\r\\n        if (msg.value < usdPriceInEth) {\\r\\n            revert NftBox__NeedMoreETHSent();\\r\\n        }\\r\\n        uint256 newTokenId = s_tokenCounter; // we save the tokenCounter in a variable before updating it\\r\\n        s_tokenCounter = s_tokenCounter + 1;\\r\\n        _safeMint(msg.sender, newTokenId);\\r\\n        string memory tokenURI = NftBoxesUri[0];\\r\\n        _setTokenURI(newTokenId, tokenURI);\\r\\n        mappingNfts[newTokenId] = Nft(newTokenId, tokenURI, false, 0);\\r\\n\\r\\n        emit NormalBoxMinted(\\r\\n            msg.sender /* Owner*/,\\r\\n            newTokenId,\\r\\n            tokenURI,\\r\\n            usdPriceInEth\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function buyRareBox() public payable {\\r\\n        uint256 usdPriceInEth = priceFeedUsdToEth(PRICE_RARE_BOX_USD);\\r\\n        if (msg.value < usdPriceInEth) {\\r\\n            revert NftBox__NeedMoreETHSent();\\r\\n        }\\r\\n        uint256 newTokenId = s_tokenCounter; // we save the tokenCounter in a variable before updating it\\r\\n        s_tokenCounter = s_tokenCounter + 1;\\r\\n        _safeMint(msg.sender, newTokenId);\\r\\n        string memory tokenURI = NftBoxesUri[1];\\r\\n        _setTokenURI(newTokenId, tokenURI);\\r\\n        mappingNfts[newTokenId] = Nft(newTokenId, tokenURI, false, 1);\\r\\n        emit RareBoxMinted(\\r\\n            msg.sender /* Owner*/,\\r\\n            newTokenId,\\r\\n            tokenURI,\\r\\n            usdPriceInEth\\r\\n        );\\r\\n        /*  setTokenId(msg.sender, newTokenId); */\\r\\n    }\\r\\n\\r\\n    function buyLegendaryBox() public payable {\\r\\n        uint256 usdPriceInEth = priceFeedUsdToEth(PRICE_LEGENDARY_BOX_USD);\\r\\n        if (msg.value < usdPriceInEth) {\\r\\n            revert NftBox__NeedMoreETHSent();\\r\\n        }\\r\\n        uint256 newTokenId = s_tokenCounter; // we save the tokenCounter in a variable before updating it\\r\\n        s_tokenCounter = s_tokenCounter + 1;\\r\\n        _safeMint(msg.sender, newTokenId);\\r\\n        string memory tokenURI = NftBoxesUri[2];\\r\\n        _setTokenURI(newTokenId, tokenURI);\\r\\n        mappingNfts[newTokenId] = Nft(newTokenId, tokenURI, false, 2);\\r\\n        emit LegendaryBoxMinted(\\r\\n            msg.sender,\\r\\n            newTokenId,\\r\\n            tokenURI,\\r\\n            usdPriceInEth\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function openBox(\\r\\n        uint256 tokenId\\r\\n    )\\r\\n        public\\r\\n        tokenIdExists(msg.sender, tokenId)\\r\\n        isOwner(tokenId, msg.sender)\\r\\n        returns (uint256 requestId)\\r\\n    {\\r\\n        Nft memory nft = mappingNfts[tokenId];\\r\\n        if (nft.Boxopened) {\\r\\n            revert NftBox__AlreadyOpened();\\r\\n        }\\r\\n        requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        mappingRequestToToken[requestId] = tokenId;\\r\\n        emit OpenBoxRandomRequested(requestId, msg.sender);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 requestId,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override {\\r\\n        uint256 tokenId = mappingRequestToToken[requestId];\\r\\n        Nft memory nft = mappingNfts[tokenId];\\r\\n        if (nft.Boxopened) {\\r\\n            revert NftBox__AlreadyOpened();\\r\\n        }\\r\\n        string memory newUri;\\r\\n        if (nft.boxType == 0) {\\r\\n            uint256 randomIndex = randomWords[0] %\\r\\n                i_charactersContract.normalPersonsLength();\\r\\n            (string memory uri, , , ) = i_charactersContract.normalPersons(\\r\\n                randomIndex\\r\\n            );\\r\\n            newUri = uri;\\r\\n        } else if (nft.boxType == 1) {\\r\\n            uint256 randomIndex = randomWords[0] %\\r\\n                i_charactersContract.rarePersonsLength();\\r\\n            (string memory uri, , , ) = i_charactersContract.rarePersons(\\r\\n                randomIndex\\r\\n            );\\r\\n            newUri = uri;\\r\\n        } else if (nft.boxType == 2) {\\r\\n            uint256 randomIndex = randomWords[0] %\\r\\n                i_charactersContract.legendaryPersonsLength();\\r\\n            (string memory uri, , , ) = i_charactersContract.legendaryPersons(\\r\\n                randomIndex\\r\\n            );\\r\\n            newUri = uri;\\r\\n        } else {\\r\\n            revert NftBox__AlreadyOpened();\\r\\n        }\\r\\n        mappingNfts[tokenId] = Nft(tokenId, newUri, true, nft.boxType);\\r\\n        _setTokenURI(tokenId, newUri);\\r\\n        emit BoxOpened(msg.sender, tokenId, newUri);\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        uint256 amount = address(this).balance;\\r\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert NftBox__TransferFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //\\r\\n    function getTokenIds(address owner) public view returns (uint256[] memory) {\\r\\n        uint256[] memory tokenArray = new uint256[](s_tokenCounter);\\r\\n        uint256 count = 0;\\r\\n        for (uint256 i = 0; i < s_tokenCounter; i++) {\\r\\n            address spender = ownerOf(i);\\r\\n            if (spender == owner) {\\r\\n                tokenArray[count] = i;\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        // resize the array to remove any unused elements\\r\\n        uint256[] memory result = new uint256[](count);\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            result[i] = tokenArray[i];\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function getNormalCard(uint256 index) public view returns (string memory) {\\r\\n        (string memory uri, , , ) = i_charactersContract.normalPersons(index);\\r\\n        return uri;\\r\\n    }\\r\\n\\r\\n    function getRareCard(uint256 index) public view returns (string memory) {\\r\\n        (string memory uri, , , ) = i_charactersContract.rarePersons(index);\\r\\n        return uri;\\r\\n    }\\r\\n\\r\\n    function getLegendaryCard(\\r\\n        uint256 index\\r\\n    ) public view returns (string memory) {\\r\\n        (string memory uri, , , ) = i_charactersContract.legendaryPersons(\\r\\n            index\\r\\n        );\\r\\n        return uri;\\r\\n    }\\r\\n\\r\\n    function getNormalCardUrisLength() public view returns (uint256) {\\r\\n        return i_charactersContract.normalPersonsLength();\\r\\n    }\\r\\n\\r\\n    function getRareCardUrisLength() public view returns (uint256) {\\r\\n        return i_charactersContract.rarePersonsLength();\\r\\n    }\\r\\n\\r\\n    function getLegendaryCardUrisLength() public view returns (uint256) {\\r\\n        return i_charactersContract.legendaryPersonsLength();\\r\\n    }\\r\\n\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return i_priceFeed;\\r\\n    }\\r\\n\\r\\n    function getTokenCounter() public view returns (uint256) {\\r\\n        return s_tokenCounter;\\r\\n    }\\r\\n\\r\\n    function getNft(uint256 tokenId) public view returns (Nft memory) {\\r\\n        return mappingNfts[tokenId];\\r\\n    }\\r\\n\\r\\n    function getNftBoxesUri(uint256 index) public view returns (string memory) {\\r\\n        return NftBoxesUri[index];\\r\\n    }\\r\\n\\r\\n    function priceFeedUsdToEth(uint256 usd) public view returns (uint256) {\\r\\n        (, int256 Price, , , ) = i_priceFeed.latestRoundData();\\r\\n        uint256 price = (usd * 1e36) / (uint256(Price) * 1e10);\\r\\n        return uint256(price);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe3e4a2b0cb520dde73440106a2823b69614af0326cd422d1146fbdd5dba2bf27\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162004fea38038062004fea833981810160405281019062000038919062000249565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505085600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff1660601b815250508473ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff1660601b8152505084600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508267ffffffffffffffff1660c08167ffffffffffffffff1660c01b815250508160e081815250508063ffffffff166101008163ffffffff1660e01b815250506000600581905550505050505050620003b4565b600081519050620001fe816200034c565b92915050565b600081519050620002158162000366565b92915050565b6000815190506200022c8162000380565b92915050565b60008151905062000243816200039a565b92915050565b60008060008060008060c0878903121562000269576200026862000347565b5b60006200027989828a01620001ed565b96505060206200028c89828a01620001ed565b95505060406200029f89828a01620001ed565b9450506060620002b289828a0162000232565b9350506080620002c589828a0162000204565b92505060a0620002d889828a016200021b565b9150509295509295509295565b6000620002f28262000303565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b6200035781620002e5565b81146200036357600080fd5b50565b6200037181620002f9565b81146200037d57600080fd5b50565b6200038b8162000323565b81146200039757600080fd5b50565b620003a58162000333565b8114620003b157600080fd5b50565b60805160601c60a05160601c60c05160c01c60e0516101005160e01c6101205160601c6101405160601c614bc5620004256000396000505060006104d601526000612d0f01526000612ccb01526000612cec01526000612c8f01526000818161026801526102bc0152614bc56000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063533d765311610071578063533d765314610142578063570d2f2014610175578063703afc87146101a5578063e783c827146101d5578063e81fb49514610205578063eabfb83914610221576100a9565b806302cac05c146100ae578063123cb832146100cc5780631fe543e3146100ea5780632a3031a2146101065780632c0d555814610124575b600080fd5b6100b6610253565b6040516100c39190614674565b60405180910390f35b6100d4610260565b6040516100e19190614674565b60405180910390f35b61010460048036038101906100ff9190614226565b610266565b005b61010e610326565b60405161011b919061463e565b60405180910390f35b61012c61034c565b6040516101399190614659565b60405180910390f35b61015c600480360381019061015791906140af565b610372565b60405161016c949392919061468f565b60405180910390f35b61018f600480360381019061018a9190614109565b6103ef565b60405161019c9190614674565b60405180910390f35b6101bf60048036038101906101ba91906141cc565b61044e565b6040516101cc91906144f4565b60405180910390f35b6101ef60048036038101906101ea9190614305565b61048d565b6040516101fc91906144f4565b60405180910390f35b61021f600480360381019061021a9190614345565b6104d2565b005b61023b600480360381019061023691906141cc565b6114c6565b60405161024a93929190614538565b60405180910390f35b6000600280549050905090565b60055481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461031857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161030f92919061450f565b60405180910390fd5b610322828261153d565b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160149054906101000a900460ff16905084565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201826003811061044457610443614aae565b5b0154905092915050565b6002818154811061045e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160205281600052604060002081600281106104a957600080fd5b016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f000000000000000000000000000000000000000000000000000000000000000090506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdc60bf9866040518263ffffffff1660e01b81526004016105549190614674565b60006040518083038186803b15801561056c57600080fd5b505afa158015610580573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105a99190614282565b50925050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdc60bf9866040518263ffffffff1660e01b815260040161060b9190614674565b60006040518083038186803b15801561062357600080fd5b505afa158015610637573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106609190614282565b50925050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdc60bf9866040518263ffffffff1660e01b81526004016106c29190614674565b60006040518083038186803b1580156106da57600080fd5b505afa1580156106ee573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107179190614282565b50925050503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16636352211e896040518263ffffffff1660e01b815260040161076c9190614674565b60206040518083038186803b15801561078457600080fd5b505afa158015610798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bc91906140dc565b73ffffffffffffffffffffffffffffffffffffffff161415806107dd575082155b806107e757508587145b806107f157508486145b806107fb57508685145b15610832576040517f85696c6f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16636352211e886040518263ffffffff1660e01b81526004016108829190614674565b60206040518083038186803b15801561089a57600080fd5b505afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d291906140dc565b73ffffffffffffffffffffffffffffffffffffffff161415806108f3575081155b1561092a576040517f85696c6f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16636352211e876040518263ffffffff1660e01b815260040161097a9190614674565b60206040518083038186803b15801561099257600080fd5b505afa1580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca91906140dc565b73ffffffffffffffffffffffffffffffffffffffff161415806109eb575080155b15610a22576040517f85696c6f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016003811115610a3657610a35614a50565b5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160149054906101000a900460ff166003811115610a9757610a96614a50565b5b1415610acf576040517f4173115d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002805490501415610d59576002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060a0016040528060055481526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160405180606001604052808a8152602001898152602001888152508152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006003811115610bc057610bbf614a50565b5b8152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201906003610c69929190613daf565b5060608201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160050160146101000a81548160ff02191690836003811115610cdc57610cdb614a50565b5b02179055509050507fdbef1b3fbd727e0f6d68a939317676615e5672a68159020edbd96a09f055a8463360405180606001604052808a815260200189815260200188815250600080604051610d3494939291906145a6565b60405180910390a160056000815480929190610d4f90614978565b91905055506114bd565b60006002600081548110610d7057610d6f614aae565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e03576040517f6e04f53700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201600380602002604051908101604052809291908260038015610eea576020028201915b815481526020019060010190808311610ed6575b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a900460ff166003811115610f6e57610f6d614a50565b5b6003811115610f8057610f7f614a50565b5b8152505090506040518060a00160405280826000015181526020018373ffffffffffffffffffffffffffffffffffffffff168152602001826040015181526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160016003811115610ff157610ff0614a50565b5b8152506000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190600361109a929190613daf565b5060608201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160050160146101000a81548160ff0219169083600381111561110d5761110c614a50565b5b02179055509050506040518060a00160405280826000015181526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160405180606001604052808c81526020018b81526020018a81525081526020018373ffffffffffffffffffffffffffffffffffffffff1681526020016001600381111561119657611195614a50565b5b8152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190600361123f929190613daf565b5060608201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160050160146101000a81548160ff021916908360038111156112b2576112b1614a50565b5b021790555090505060005b600280549050811015611475578273ffffffffffffffffffffffffffffffffffffffff16600282815481106112f5576112f4614aae565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156114625760008190505b600160028054905061135491906147ef565b81101561141557600260018261136a9190614799565b8154811061137b5761137a614aae565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600282815481106113ba576113b9614aae565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808061140d90614978565b915050611342565b50600280548061142857611427614a7f565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055611475565b808061146d90614978565b9150506112bd565b507f3182b38841de065eded850f9e9fa30850bb37c3a57df9bef3841138a94b7295633836040516114a792919061450f565b60405180910390a16114b93383612279565b5050505b50505050505050565b60066020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16905083565b6000600160008481526020019081526020016000206002806020026040519081016040528092919082600280156115bf576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611575575b5050505050905060006115e9826000600281106115df576115de614aae565b5b6020020151612e78565b9050600061160e8360016002811061160457611603614aae565b5b6020020151612e78565b90506040518060a001604052806000808660006002811061163257611631614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015481526020018460006002811061168e5761168d614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff168152602001600080866000600281106116c5576116c4614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160038060200260405190810160405280929190826003801561173e576020028201915b81548152602001906001019080831161172a575b505050505081526020018460016002811061175c5761175b614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff16815260200160038081111561178f5761178e614a50565b5b815250600080856000600281106117a9576117a8614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201906003611850929190613daf565b5060608201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160050160146101000a81548160ff021916908360038111156118c3576118c2614a50565b5b02179055509050506040518060a00160405280600080866001600281106118ed576118ec614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015481526020018460016002811061194957611948614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff168152602001600080866001600281106119805761197f614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016003806020026040519081016040528092919082600380156119f9576020028201915b8154815260200190600101908083116119e5575b5050505050815260200184600060028110611a1757611a16614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff168152602001600380811115611a4a57611a49614a50565b5b81525060008085600160028110611a6457611a63614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201906003611b0b929190613daf565b5060608201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160050160146101000a81548160ff02191690836003811115611b7e57611b7d614a50565b5b02179055509050506000600385600081518110611b9e57611b9d614aae565b5b6020026020010151611bb091906149c1565b90506000806000915060009050838360038110611bd057611bcf614aae565b5b602002015160200151858460038110611bec57611beb614aae565b5b6020020151602001511115611c0e578180611c0690614978565b925050611c7d565b838360038110611c2157611c20614aae565b5b602002015160200151858460038110611c3d57611c3c614aae565b5b6020020151602001511015611c5f578080611c5790614978565b915050611c7c565b8180611c6a90614978565b9250508080611c7890614978565b9150505b5b6000806000600160008c8152602001908152602001600020600060028110611ca857611ca7614aae565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050611d12613def565b611d1a613def565b60005b6003811015611e395786811415611d3357611e26565b86811015611da657888160038110611d4e57611d4d614aae565b5b6020020151838260028110611d6657611d65614aae565b5b6020020181905250878160038110611d8157611d80614aae565b5b6020020151828260028110611d9957611d98614aae565b5b6020020181905250611e25565b888160038110611db957611db8614aae565b5b602002015183600183611dcc91906147ef565b60028110611ddd57611ddc614aae565b5b6020020181905250878160038110611df857611df7614aae565b5b602002015182600183611e0b91906147ef565b60028110611e1c57611e1b614aae565b5b60200201819052505b5b8080611e3190614978565b915050611d1d565b508060028b600181518110611e5157611e50614aae565b5b6020026020010151611e6391906149c1565b60028110611e7457611e73614aae565b5b6020020151604001518260028c600181518110611e9457611e93614aae565b5b6020026020010151611ea691906149c1565b60028110611eb757611eb6614aae565b5b6020020151604001511115611ed9578480611ed190614978565b955050611f96565b8060028b600181518110611ef057611eef614aae565b5b6020026020010151611f0291906149c1565b60028110611f1357611f12614aae565b5b6020020151604001518260028c600181518110611f3357611f32614aae565b5b6020026020010151611f4591906149c1565b60028110611f5657611f55614aae565b5b6020020151604001511015611f78578380611f7090614978565b945050611f95565b8480611f8390614978565b9550508380611f9190614978565b9450505b5b611f9e613e1c565b611fa6613e1c565b60005b60028110156121135760028d600181518110611fc857611fc7614aae565b5b6020026020010151611fda91906149c1565b811415611fe657612100565b60028d600181518110611ffc57611ffb614aae565b5b602002602001015161200e91906149c1565b8110156120805784816002811061202857612027614aae565b5b60200201518382600181106120405761203f614aae565b5b602002018190525083816002811061205b5761205a614aae565b5b602002015182826001811061207357612072614aae565b5b60200201819052506120ff565b84816002811061209357612092614aae565b5b6020020151836001836120a691906147ef565b600181106120b7576120b6614aae565b5b60200201819052508381600281106120d2576120d1614aae565b5b6020020151826001836120e591906147ef565b600181106120f6576120f5614aae565b5b60200201819052505b5b808061210b90614978565b915050611fa9565b5060008b60006002811061212a57612129614aae565b5b6020020151905060008c60016002811061214757612146614aae565b5b602002015190508260006001811061216257612161614aae565b5b6020020151606001518460006001811061217f5761217e614aae565b5b60200201516060015111156121a157888061219990614978565b995050612212565b826000600181106121b5576121b4614aae565b5b602002015160600151846000600181106121d2576121d1614aae565b5b60200201516060015110156121f45787806121ec90614978565b985050612211565b88806121ff90614978565b995050878061220d90614978565b9850505b5b6000806000612224858d868e8e6131d0565b9250925092507f73755bcca91241f24d43f19dfd87dd6903d53f215f04fe1277e6a4d826ae8e6883838360405161225d93929190614538565b60405180910390a1505050505050505050505050505050505050565b600082828173ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415806123a657508073ffffffffffffffffffffffffffffffffffffffff166000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156123dd576040517f77be31cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160038111156123f1576123f0614a50565b5b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160149054906101000a900460ff16600381111561245257612451614a50565b5b1415806124d257506001600381111561246e5761246d614a50565b5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160149054906101000a900460ff1660038111156124cf576124ce614a50565b5b14155b15612509576040517f6e04f53700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158061263257508173ffffffffffffffffffffffffffffffffffffffff166000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15612669576040517f1b907f6100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201600380602002604051908101604052809291908260038015612750576020028201915b81548152602001906001019080831161273c575b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a900460ff1660038111156127d4576127d3614a50565b5b60038111156127e6576127e5614a50565b5b81525050905060008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282016003806020026040519081016040528092919082600380156128d3576020028201915b8154815260200190600101908083116128bf575b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a900460ff16600381111561295757612956614a50565b5b600381111561296957612968614a50565b5b8152505090506040518060a00160405280836000015181526020018873ffffffffffffffffffffffffffffffffffffffff168152602001836040015181526020018773ffffffffffffffffffffffffffffffffffffffff168152602001600260038111156129da576129d9614a50565b5b8152506000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201906003612a83929190613daf565b5060608201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160050160146101000a81548160ff02191690836003811115612af657612af5614a50565b5b02179055509050506040518060a00160405280836000015181526020018773ffffffffffffffffffffffffffffffffffffffff168152602001826040015181526020018873ffffffffffffffffffffffffffffffffffffffff16815260200160026003811115612b6957612b68614a50565b5b8152506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201906003612c12929190613daf565b5060608201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160050160146101000a81548160ff02191690836003811115612c8557612c84614a50565b5b02179055509050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060036040518663ffffffff1660e01b8152600401612d509594939291906145eb565b602060405180830381600087803b158015612d6a57600080fd5b505af1158015612d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da291906141f9565b945060405180604001604052808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525060016000878152602001908152602001600020906002612e32929190613e49565b507f3e817b1c20f032334f718d10f44d60d4f63e5807f8f8f4319cdf7f5f8a98e880878787604051612e669392919061456f565b60405180910390a15050505092915050565b612e80613ec6565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600380602002604051908101604052809291908260038015612efa576020028201915b815481526020019060010190808311612ee6575b50505050509050600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdc60bf984600060038110612f5657612f55614aae565b5b60200201516040518263ffffffff1660e01b8152600401612f779190614674565b60006040518083038186803b158015612f8f57600080fd5b505afa158015612fa3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612fcc9190614282565b935050925050600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdc60bf98660016003811061302757613026614aae565b5b60200201516040518263ffffffff1660e01b81526004016130489190614674565b60006040518083038186803b15801561306057600080fd5b505afa158015613074573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061309d9190614282565b935050925050600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdc60bf9886002600381106130f8576130f7614aae565b5b60200201516040518263ffffffff1660e01b81526004016131199190614674565b60006040518083038186803b15801561313157600080fd5b505afa158015613145573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061316e9190614282565b93505092505060006131808688613544565b9050600061318e8587613544565b9050600061319c8486613544565b905060006040518060600160405280858152602001848152602001838152509050809b505050505050505050505050919050565b6000806000848711156132fa5760405180606001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001600015158152506006600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690831515021790555090505087866000925092509250613539565b8685111561341f5760405180606001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff168152602001600015158152506006600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690831515021790555090505085886000925092509250613539565b60405180606001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001600115158152506006600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690831515021790555090505060008060019250925092505b955095509592505050565b61354c613ef3565b60008314156138165760005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166365c889db6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135c057600080fd5b505afa1580156135d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f891906141f9565b811015613810576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634132607b836040518263ffffffff1660e01b815260040161365c9190614674565b60006040518083038186803b15801561367457600080fd5b505afa158015613688573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906136b19190614149565b5050509050836040516020016136c791906144dd565b60405160208183030381529060405280519060200120816040516020016136ee91906144dd565b6040516020818303038152906040528051906020012014156137fc57600080600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634132607b876040518263ffffffff1660e01b815260040161376b9190614674565b60006040518083038186803b15801561378357600080fd5b505afa158015613797573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906137c09190614149565b93509350935093506000604051806080016040528086815260200185815260200184815260200183815250905080975050505050505050613da9565b50808061380890614978565b915050613558565b50613da8565b6001831415613ae05760005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a83de166040518163ffffffff1660e01b815260040160206040518083038186803b15801561388a57600080fd5b505afa15801561389e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c291906141f9565b811015613ada576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cff2c359836040518263ffffffff1660e01b81526004016139269190614674565b60006040518083038186803b15801561393e57600080fd5b505afa158015613952573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061397b9190614149565b50505090508360405160200161399191906144dd565b60405160208183030381529060405280519060200120816040516020016139b891906144dd565b604051602081830303815290604052805190602001201415613ac657600080600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cff2c359876040518263ffffffff1660e01b8152600401613a359190614674565b60006040518083038186803b158015613a4d57600080fd5b505afa158015613a61573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613a8a9190614149565b93509350935093506000604051806080016040528086815260200185815260200184815260200183815250905080975050505050505050613da9565b508080613ad290614978565b915050613822565b50613da7565b6002831415613da65760005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166371be70026040518163ffffffff1660e01b815260040160206040518083038186803b158015613b5457600080fd5b505afa158015613b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b8c91906141f9565b811015613da4576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639cfa7daa836040518263ffffffff1660e01b8152600401613bf09190614674565b60006040518083038186803b158015613c0857600080fd5b505afa158015613c1c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613c459190614149565b505050905083604051602001613c5b91906144dd565b6040516020818303038152906040528051906020012081604051602001613c8291906144dd565b604051602081830303815290604052805190602001201415613d9057600080600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639cfa7daa876040518263ffffffff1660e01b8152600401613cff9190614674565b60006040518083038186803b158015613d1757600080fd5b505afa158015613d2b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613d549190614149565b93509350935093506000604051806080016040528086815260200185815260200184815260200183815250905080975050505050505050613da9565b508080613d9c90614978565b915050613aec565b505b5b5b5b92915050565b8260038101928215613dde579160200282015b82811115613ddd578251825591602001919060010190613dc2565b5b509050613deb9190613f1b565b5090565b60405180604001604052806002905b613e06613ef3565b815260200190600190039081613dfe5790505090565b60405180602001604052806001905b613e33613ef3565b815260200190600190039081613e2b5790505090565b8260028101928215613eb5579160200282015b82811115613eb45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190613e5c565b5b509050613ec29190613f1b565b5090565b60405180606001604052806003905b613edd613ef3565b815260200190600190039081613ed55790505090565b6040518060800160405280606081526020016000815260200160008152602001600081525090565b5b80821115613f34576000816000905550600101613f1c565b5090565b6000613f4b613f46846146f9565b6146d4565b90508083825260208201905082856020860282011115613f6e57613f6d614b11565b5b60005b85811015613f9e5781613f848882614085565b845260208401935060208301925050600181019050613f71565b5050509392505050565b6000613fbb613fb684614725565b6146d4565b905082815260208101848484011115613fd757613fd6614b16565b5b613fe2848285614914565b509392505050565b600081359050613ff981614b4a565b92915050565b60008151905061400e81614b4a565b92915050565b600082601f83011261402957614028614b0c565b5b8135614039848260208601613f38565b91505092915050565b60008151905061405181614b61565b92915050565b600082601f83011261406c5761406b614b0c565b5b815161407c848260208601613fa8565b91505092915050565b60008135905061409481614b78565b92915050565b6000815190506140a981614b78565b92915050565b6000602082840312156140c5576140c4614b20565b5b60006140d384828501613fea565b91505092915050565b6000602082840312156140f2576140f1614b20565b5b600061410084828501613fff565b91505092915050565b600080604083850312156141205761411f614b20565b5b600061412e85828601613fea565b925050602061413f85828601614085565b9150509250929050565b6000806000806080858703121561416357614162614b20565b5b600085015167ffffffffffffffff81111561418157614180614b1b565b5b61418d87828801614057565b945050602061419e8782880161409a565b93505060406141af8782880161409a565b92505060606141c08782880161409a565b91505092959194509250565b6000602082840312156141e2576141e1614b20565b5b60006141f084828501614085565b91505092915050565b60006020828403121561420f5761420e614b20565b5b600061421d8482850161409a565b91505092915050565b6000806040838503121561423d5761423c614b20565b5b600061424b85828601614085565b925050602083013567ffffffffffffffff81111561426c5761426b614b1b565b5b61427885828601614014565b9150509250929050565b6000806000806080858703121561429c5761429b614b20565b5b60006142aa8782880161409a565b945050602085015167ffffffffffffffff8111156142cb576142ca614b1b565b5b6142d787828801614057565b93505060406142e887828801614042565b92505060606142f98782880161409a565b91505092959194509250565b6000806040838503121561431c5761431b614b20565b5b600061432a85828601614085565b925050602061433b85828601614085565b9150509250929050565b60008060006060848603121561435e5761435d614b20565b5b600061436c86828701614085565b935050602061437d86828701614085565b925050604061438e86828701614085565b9150509250925092565b60006143a483836144a1565b60208301905092915050565b6143b981614823565b82525050565b6143c881614760565b6143d28184614783565b92506143dd82614756565b8060005b8381101561440e5781516143f58782614398565b965061440083614776565b9250506001810190506143e1565b505050505050565b61441f81614835565b82525050565b61442e81614841565b82525050565b61443d816148ba565b82525050565b61444c816148cc565b82525050565b61445b816148de565b82525050565b600061446c8261476b565b614476818561478e565b9350614486818560208601614914565b80840191505092915050565b61449b8161485e565b82525050565b6144aa8161488c565b82525050565b6144b98161488c565b82525050565b6144c881614896565b82525050565b6144d7816148a6565b82525050565b60006144e98284614461565b915081905092915050565b600060208201905061450960008301846143b0565b92915050565b600060408201905061452460008301856143b0565b61453160208301846143b0565b9392505050565b600060608201905061454d60008301866143b0565b61455a60208301856143b0565b6145676040830184614416565b949350505050565b600060608201905061458460008301866143b0565b61459160208301856143b0565b61459e60408301846144b0565b949350505050565b600060c0820190506145bb60008301876143b0565b6145c860208301866143bf565b6145d560808301856143b0565b6145e260a0830184614452565b95945050505050565b600060a0820190506146006000830188614425565b61460d60208301876144ce565b61461a6040830186614492565b61462760608301856144bf565b61463460808301846144bf565b9695505050505050565b60006020820190506146536000830184614434565b92915050565b600060208201905061466e6000830184614443565b92915050565b600060208201905061468960008301846144b0565b92915050565b60006080820190506146a460008301876144b0565b6146b160208301866143b0565b6146be60408301856143b0565b6146cb6060830184614452565b95945050505050565b60006146de6146ef565b90506146ea8282614947565b919050565b6000604051905090565b600067ffffffffffffffff82111561471457614713614add565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156147405761473f614add565b5b61474982614b25565b9050602081019050919050565b6000819050919050565b600060039050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b60006147a48261488c565b91506147af8361488c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156147e4576147e36149f2565b5b828201905092915050565b60006147fa8261488c565b91506148058361488c565b925082821015614818576148176149f2565b5b828203905092915050565b600061482e8261486c565b9050919050565b60008115159050919050565b6000819050919050565b600081905061485982614b36565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006148c5826148f0565b9050919050565b60006148d7826148f0565b9050919050565b60006148e98261484b565b9050919050565b60006148fb82614902565b9050919050565b600061490d8261486c565b9050919050565b60005b83811015614932578082015181840152602081019050614917565b83811115614941576000848401525b50505050565b61495082614b25565b810181811067ffffffffffffffff8211171561496f5761496e614add565b5b80604052505050565b60006149838261488c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156149b6576149b56149f2565b5b600182019050919050565b60006149cc8261488c565b91506149d78361488c565b9250826149e7576149e6614a21565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60048110614b4757614b46614a50565b5b50565b614b5381614823565b8114614b5e57600080fd5b50565b614b6a81614835565b8114614b7557600080fd5b50565b614b818161488c565b8114614b8c57600080fd5b5056fea2646970667358221220e5c45367cfac1f720a0cfe36fcc89c2262b8fb5192bf8b047395c912e3e812ed64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063533d765311610071578063533d765314610142578063570d2f2014610175578063703afc87146101a5578063e783c827146101d5578063e81fb49514610205578063eabfb83914610221576100a9565b806302cac05c146100ae578063123cb832146100cc5780631fe543e3146100ea5780632a3031a2146101065780632c0d555814610124575b600080fd5b6100b6610253565b6040516100c39190614674565b60405180910390f35b6100d4610260565b6040516100e19190614674565b60405180910390f35b61010460048036038101906100ff9190614226565b610266565b005b61010e610326565b60405161011b919061463e565b60405180910390f35b61012c61034c565b6040516101399190614659565b60405180910390f35b61015c600480360381019061015791906140af565b610372565b60405161016c949392919061468f565b60405180910390f35b61018f600480360381019061018a9190614109565b6103ef565b60405161019c9190614674565b60405180910390f35b6101bf60048036038101906101ba91906141cc565b61044e565b6040516101cc91906144f4565b60405180910390f35b6101ef60048036038101906101ea9190614305565b61048d565b6040516101fc91906144f4565b60405180910390f35b61021f600480360381019061021a9190614345565b6104d2565b005b61023b600480360381019061023691906141cc565b6114c6565b60405161024a93929190614538565b60405180910390f35b6000600280549050905090565b60055481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461031857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161030f92919061450f565b60405180910390fd5b610322828261153d565b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160149054906101000a900460ff16905084565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201826003811061044457610443614aae565b5b0154905092915050565b6002818154811061045e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160205281600052604060002081600281106104a957600080fd5b016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f000000000000000000000000000000000000000000000000000000000000000090506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdc60bf9866040518263ffffffff1660e01b81526004016105549190614674565b60006040518083038186803b15801561056c57600080fd5b505afa158015610580573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105a99190614282565b50925050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdc60bf9866040518263ffffffff1660e01b815260040161060b9190614674565b60006040518083038186803b15801561062357600080fd5b505afa158015610637573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106609190614282565b50925050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdc60bf9866040518263ffffffff1660e01b81526004016106c29190614674565b60006040518083038186803b1580156106da57600080fd5b505afa1580156106ee573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107179190614282565b50925050503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16636352211e896040518263ffffffff1660e01b815260040161076c9190614674565b60206040518083038186803b15801561078457600080fd5b505afa158015610798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bc91906140dc565b73ffffffffffffffffffffffffffffffffffffffff161415806107dd575082155b806107e757508587145b806107f157508486145b806107fb57508685145b15610832576040517f85696c6f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16636352211e886040518263ffffffff1660e01b81526004016108829190614674565b60206040518083038186803b15801561089a57600080fd5b505afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d291906140dc565b73ffffffffffffffffffffffffffffffffffffffff161415806108f3575081155b1561092a576040517f85696c6f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16636352211e876040518263ffffffff1660e01b815260040161097a9190614674565b60206040518083038186803b15801561099257600080fd5b505afa1580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca91906140dc565b73ffffffffffffffffffffffffffffffffffffffff161415806109eb575080155b15610a22576040517f85696c6f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016003811115610a3657610a35614a50565b5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160149054906101000a900460ff166003811115610a9757610a96614a50565b5b1415610acf576040517f4173115d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002805490501415610d59576002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060a0016040528060055481526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160405180606001604052808a8152602001898152602001888152508152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006003811115610bc057610bbf614a50565b5b8152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201906003610c69929190613daf565b5060608201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160050160146101000a81548160ff02191690836003811115610cdc57610cdb614a50565b5b02179055509050507fdbef1b3fbd727e0f6d68a939317676615e5672a68159020edbd96a09f055a8463360405180606001604052808a815260200189815260200188815250600080604051610d3494939291906145a6565b60405180910390a160056000815480929190610d4f90614978565b91905055506114bd565b60006002600081548110610d7057610d6f614aae565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e03576040517f6e04f53700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201600380602002604051908101604052809291908260038015610eea576020028201915b815481526020019060010190808311610ed6575b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a900460ff166003811115610f6e57610f6d614a50565b5b6003811115610f8057610f7f614a50565b5b8152505090506040518060a00160405280826000015181526020018373ffffffffffffffffffffffffffffffffffffffff168152602001826040015181526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160016003811115610ff157610ff0614a50565b5b8152506000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190600361109a929190613daf565b5060608201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160050160146101000a81548160ff0219169083600381111561110d5761110c614a50565b5b02179055509050506040518060a00160405280826000015181526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160405180606001604052808c81526020018b81526020018a81525081526020018373ffffffffffffffffffffffffffffffffffffffff1681526020016001600381111561119657611195614a50565b5b8152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190600361123f929190613daf565b5060608201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160050160146101000a81548160ff021916908360038111156112b2576112b1614a50565b5b021790555090505060005b600280549050811015611475578273ffffffffffffffffffffffffffffffffffffffff16600282815481106112f5576112f4614aae565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156114625760008190505b600160028054905061135491906147ef565b81101561141557600260018261136a9190614799565b8154811061137b5761137a614aae565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600282815481106113ba576113b9614aae565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808061140d90614978565b915050611342565b50600280548061142857611427614a7f565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055611475565b808061146d90614978565b9150506112bd565b507f3182b38841de065eded850f9e9fa30850bb37c3a57df9bef3841138a94b7295633836040516114a792919061450f565b60405180910390a16114b93383612279565b5050505b50505050505050565b60066020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16905083565b6000600160008481526020019081526020016000206002806020026040519081016040528092919082600280156115bf576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611575575b5050505050905060006115e9826000600281106115df576115de614aae565b5b6020020151612e78565b9050600061160e8360016002811061160457611603614aae565b5b6020020151612e78565b90506040518060a001604052806000808660006002811061163257611631614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015481526020018460006002811061168e5761168d614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff168152602001600080866000600281106116c5576116c4614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160038060200260405190810160405280929190826003801561173e576020028201915b81548152602001906001019080831161172a575b505050505081526020018460016002811061175c5761175b614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff16815260200160038081111561178f5761178e614a50565b5b815250600080856000600281106117a9576117a8614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201906003611850929190613daf565b5060608201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160050160146101000a81548160ff021916908360038111156118c3576118c2614a50565b5b02179055509050506040518060a00160405280600080866001600281106118ed576118ec614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015481526020018460016002811061194957611948614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff168152602001600080866001600281106119805761197f614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016003806020026040519081016040528092919082600380156119f9576020028201915b8154815260200190600101908083116119e5575b5050505050815260200184600060028110611a1757611a16614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff168152602001600380811115611a4a57611a49614a50565b5b81525060008085600160028110611a6457611a63614aae565b5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201906003611b0b929190613daf565b5060608201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160050160146101000a81548160ff02191690836003811115611b7e57611b7d614a50565b5b02179055509050506000600385600081518110611b9e57611b9d614aae565b5b6020026020010151611bb091906149c1565b90506000806000915060009050838360038110611bd057611bcf614aae565b5b602002015160200151858460038110611bec57611beb614aae565b5b6020020151602001511115611c0e578180611c0690614978565b925050611c7d565b838360038110611c2157611c20614aae565b5b602002015160200151858460038110611c3d57611c3c614aae565b5b6020020151602001511015611c5f578080611c5790614978565b915050611c7c565b8180611c6a90614978565b9250508080611c7890614978565b9150505b5b6000806000600160008c8152602001908152602001600020600060028110611ca857611ca7614aae565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050611d12613def565b611d1a613def565b60005b6003811015611e395786811415611d3357611e26565b86811015611da657888160038110611d4e57611d4d614aae565b5b6020020151838260028110611d6657611d65614aae565b5b6020020181905250878160038110611d8157611d80614aae565b5b6020020151828260028110611d9957611d98614aae565b5b6020020181905250611e25565b888160038110611db957611db8614aae565b5b602002015183600183611dcc91906147ef565b60028110611ddd57611ddc614aae565b5b6020020181905250878160038110611df857611df7614aae565b5b602002015182600183611e0b91906147ef565b60028110611e1c57611e1b614aae565b5b60200201819052505b5b8080611e3190614978565b915050611d1d565b508060028b600181518110611e5157611e50614aae565b5b6020026020010151611e6391906149c1565b60028110611e7457611e73614aae565b5b6020020151604001518260028c600181518110611e9457611e93614aae565b5b6020026020010151611ea691906149c1565b60028110611eb757611eb6614aae565b5b6020020151604001511115611ed9578480611ed190614978565b955050611f96565b8060028b600181518110611ef057611eef614aae565b5b6020026020010151611f0291906149c1565b60028110611f1357611f12614aae565b5b6020020151604001518260028c600181518110611f3357611f32614aae565b5b6020026020010151611f4591906149c1565b60028110611f5657611f55614aae565b5b6020020151604001511015611f78578380611f7090614978565b945050611f95565b8480611f8390614978565b9550508380611f9190614978565b9450505b5b611f9e613e1c565b611fa6613e1c565b60005b60028110156121135760028d600181518110611fc857611fc7614aae565b5b6020026020010151611fda91906149c1565b811415611fe657612100565b60028d600181518110611ffc57611ffb614aae565b5b602002602001015161200e91906149c1565b8110156120805784816002811061202857612027614aae565b5b60200201518382600181106120405761203f614aae565b5b602002018190525083816002811061205b5761205a614aae565b5b602002015182826001811061207357612072614aae565b5b60200201819052506120ff565b84816002811061209357612092614aae565b5b6020020151836001836120a691906147ef565b600181106120b7576120b6614aae565b5b60200201819052508381600281106120d2576120d1614aae565b5b6020020151826001836120e591906147ef565b600181106120f6576120f5614aae565b5b60200201819052505b5b808061210b90614978565b915050611fa9565b5060008b60006002811061212a57612129614aae565b5b6020020151905060008c60016002811061214757612146614aae565b5b602002015190508260006001811061216257612161614aae565b5b6020020151606001518460006001811061217f5761217e614aae565b5b60200201516060015111156121a157888061219990614978565b995050612212565b826000600181106121b5576121b4614aae565b5b602002015160600151846000600181106121d2576121d1614aae565b5b60200201516060015110156121f45787806121ec90614978565b985050612211565b88806121ff90614978565b995050878061220d90614978565b9850505b5b6000806000612224858d868e8e6131d0565b9250925092507f73755bcca91241f24d43f19dfd87dd6903d53f215f04fe1277e6a4d826ae8e6883838360405161225d93929190614538565b60405180910390a1505050505050505050505050505050505050565b600082828173ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415806123a657508073ffffffffffffffffffffffffffffffffffffffff166000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156123dd576040517f77be31cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160038111156123f1576123f0614a50565b5b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160149054906101000a900460ff16600381111561245257612451614a50565b5b1415806124d257506001600381111561246e5761246d614a50565b5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160149054906101000a900460ff1660038111156124cf576124ce614a50565b5b14155b15612509576040517f6e04f53700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158061263257508173ffffffffffffffffffffffffffffffffffffffff166000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15612669576040517f1b907f6100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201600380602002604051908101604052809291908260038015612750576020028201915b81548152602001906001019080831161273c575b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a900460ff1660038111156127d4576127d3614a50565b5b60038111156127e6576127e5614a50565b5b81525050905060008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282016003806020026040519081016040528092919082600380156128d3576020028201915b8154815260200190600101908083116128bf575b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a900460ff16600381111561295757612956614a50565b5b600381111561296957612968614a50565b5b8152505090506040518060a00160405280836000015181526020018873ffffffffffffffffffffffffffffffffffffffff168152602001836040015181526020018773ffffffffffffffffffffffffffffffffffffffff168152602001600260038111156129da576129d9614a50565b5b8152506000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201906003612a83929190613daf565b5060608201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160050160146101000a81548160ff02191690836003811115612af657612af5614a50565b5b02179055509050506040518060a00160405280836000015181526020018773ffffffffffffffffffffffffffffffffffffffff168152602001826040015181526020018873ffffffffffffffffffffffffffffffffffffffff16815260200160026003811115612b6957612b68614a50565b5b8152506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201906003612c12929190613daf565b5060608201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160050160146101000a81548160ff02191690836003811115612c8557612c84614a50565b5b02179055509050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060036040518663ffffffff1660e01b8152600401612d509594939291906145eb565b602060405180830381600087803b158015612d6a57600080fd5b505af1158015612d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da291906141f9565b945060405180604001604052808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525060016000878152602001908152602001600020906002612e32929190613e49565b507f3e817b1c20f032334f718d10f44d60d4f63e5807f8f8f4319cdf7f5f8a98e880878787604051612e669392919061456f565b60405180910390a15050505092915050565b612e80613ec6565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600380602002604051908101604052809291908260038015612efa576020028201915b815481526020019060010190808311612ee6575b50505050509050600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdc60bf984600060038110612f5657612f55614aae565b5b60200201516040518263ffffffff1660e01b8152600401612f779190614674565b60006040518083038186803b158015612f8f57600080fd5b505afa158015612fa3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612fcc9190614282565b935050925050600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdc60bf98660016003811061302757613026614aae565b5b60200201516040518263ffffffff1660e01b81526004016130489190614674565b60006040518083038186803b15801561306057600080fd5b505afa158015613074573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061309d9190614282565b935050925050600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdc60bf9886002600381106130f8576130f7614aae565b5b60200201516040518263ffffffff1660e01b81526004016131199190614674565b60006040518083038186803b15801561313157600080fd5b505afa158015613145573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061316e9190614282565b93505092505060006131808688613544565b9050600061318e8587613544565b9050600061319c8486613544565b905060006040518060600160405280858152602001848152602001838152509050809b505050505050505050505050919050565b6000806000848711156132fa5760405180606001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001600015158152506006600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690831515021790555090505087866000925092509250613539565b8685111561341f5760405180606001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff168152602001600015158152506006600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690831515021790555090505085886000925092509250613539565b60405180606001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001600115158152506006600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690831515021790555090505060008060019250925092505b955095509592505050565b61354c613ef3565b60008314156138165760005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166365c889db6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135c057600080fd5b505afa1580156135d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f891906141f9565b811015613810576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634132607b836040518263ffffffff1660e01b815260040161365c9190614674565b60006040518083038186803b15801561367457600080fd5b505afa158015613688573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906136b19190614149565b5050509050836040516020016136c791906144dd565b60405160208183030381529060405280519060200120816040516020016136ee91906144dd565b6040516020818303038152906040528051906020012014156137fc57600080600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634132607b876040518263ffffffff1660e01b815260040161376b9190614674565b60006040518083038186803b15801561378357600080fd5b505afa158015613797573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906137c09190614149565b93509350935093506000604051806080016040528086815260200185815260200184815260200183815250905080975050505050505050613da9565b50808061380890614978565b915050613558565b50613da8565b6001831415613ae05760005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a83de166040518163ffffffff1660e01b815260040160206040518083038186803b15801561388a57600080fd5b505afa15801561389e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c291906141f9565b811015613ada576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cff2c359836040518263ffffffff1660e01b81526004016139269190614674565b60006040518083038186803b15801561393e57600080fd5b505afa158015613952573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061397b9190614149565b50505090508360405160200161399191906144dd565b60405160208183030381529060405280519060200120816040516020016139b891906144dd565b604051602081830303815290604052805190602001201415613ac657600080600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cff2c359876040518263ffffffff1660e01b8152600401613a359190614674565b60006040518083038186803b158015613a4d57600080fd5b505afa158015613a61573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613a8a9190614149565b93509350935093506000604051806080016040528086815260200185815260200184815260200183815250905080975050505050505050613da9565b508080613ad290614978565b915050613822565b50613da7565b6002831415613da65760005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166371be70026040518163ffffffff1660e01b815260040160206040518083038186803b158015613b5457600080fd5b505afa158015613b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b8c91906141f9565b811015613da4576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639cfa7daa836040518263ffffffff1660e01b8152600401613bf09190614674565b60006040518083038186803b158015613c0857600080fd5b505afa158015613c1c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613c459190614149565b505050905083604051602001613c5b91906144dd565b6040516020818303038152906040528051906020012081604051602001613c8291906144dd565b604051602081830303815290604052805190602001201415613d9057600080600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639cfa7daa876040518263ffffffff1660e01b8152600401613cff9190614674565b60006040518083038186803b158015613d1757600080fd5b505afa158015613d2b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613d549190614149565b93509350935093506000604051806080016040528086815260200185815260200184815260200183815250905080975050505050505050613da9565b508080613d9c90614978565b915050613aec565b505b5b5b5b92915050565b8260038101928215613dde579160200282015b82811115613ddd578251825591602001919060010190613dc2565b5b509050613deb9190613f1b565b5090565b60405180604001604052806002905b613e06613ef3565b815260200190600190039081613dfe5790505090565b60405180602001604052806001905b613e33613ef3565b815260200190600190039081613e2b5790505090565b8260028101928215613eb5579160200282015b82811115613eb45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190613e5c565b5b509050613ec29190613f1b565b5090565b60405180606001604052806003905b613edd613ef3565b815260200190600190039081613ed55790505090565b6040518060800160405280606081526020016000815260200160008152602001600081525090565b5b80821115613f34576000816000905550600101613f1c565b5090565b6000613f4b613f46846146f9565b6146d4565b90508083825260208201905082856020860282011115613f6e57613f6d614b11565b5b60005b85811015613f9e5781613f848882614085565b845260208401935060208301925050600181019050613f71565b5050509392505050565b6000613fbb613fb684614725565b6146d4565b905082815260208101848484011115613fd757613fd6614b16565b5b613fe2848285614914565b509392505050565b600081359050613ff981614b4a565b92915050565b60008151905061400e81614b4a565b92915050565b600082601f83011261402957614028614b0c565b5b8135614039848260208601613f38565b91505092915050565b60008151905061405181614b61565b92915050565b600082601f83011261406c5761406b614b0c565b5b815161407c848260208601613fa8565b91505092915050565b60008135905061409481614b78565b92915050565b6000815190506140a981614b78565b92915050565b6000602082840312156140c5576140c4614b20565b5b60006140d384828501613fea565b91505092915050565b6000602082840312156140f2576140f1614b20565b5b600061410084828501613fff565b91505092915050565b600080604083850312156141205761411f614b20565b5b600061412e85828601613fea565b925050602061413f85828601614085565b9150509250929050565b6000806000806080858703121561416357614162614b20565b5b600085015167ffffffffffffffff81111561418157614180614b1b565b5b61418d87828801614057565b945050602061419e8782880161409a565b93505060406141af8782880161409a565b92505060606141c08782880161409a565b91505092959194509250565b6000602082840312156141e2576141e1614b20565b5b60006141f084828501614085565b91505092915050565b60006020828403121561420f5761420e614b20565b5b600061421d8482850161409a565b91505092915050565b6000806040838503121561423d5761423c614b20565b5b600061424b85828601614085565b925050602083013567ffffffffffffffff81111561426c5761426b614b1b565b5b61427885828601614014565b9150509250929050565b6000806000806080858703121561429c5761429b614b20565b5b60006142aa8782880161409a565b945050602085015167ffffffffffffffff8111156142cb576142ca614b1b565b5b6142d787828801614057565b93505060406142e887828801614042565b92505060606142f98782880161409a565b91505092959194509250565b6000806040838503121561431c5761431b614b20565b5b600061432a85828601614085565b925050602061433b85828601614085565b9150509250929050565b60008060006060848603121561435e5761435d614b20565b5b600061436c86828701614085565b935050602061437d86828701614085565b925050604061438e86828701614085565b9150509250925092565b60006143a483836144a1565b60208301905092915050565b6143b981614823565b82525050565b6143c881614760565b6143d28184614783565b92506143dd82614756565b8060005b8381101561440e5781516143f58782614398565b965061440083614776565b9250506001810190506143e1565b505050505050565b61441f81614835565b82525050565b61442e81614841565b82525050565b61443d816148ba565b82525050565b61444c816148cc565b82525050565b61445b816148de565b82525050565b600061446c8261476b565b614476818561478e565b9350614486818560208601614914565b80840191505092915050565b61449b8161485e565b82525050565b6144aa8161488c565b82525050565b6144b98161488c565b82525050565b6144c881614896565b82525050565b6144d7816148a6565b82525050565b60006144e98284614461565b915081905092915050565b600060208201905061450960008301846143b0565b92915050565b600060408201905061452460008301856143b0565b61453160208301846143b0565b9392505050565b600060608201905061454d60008301866143b0565b61455a60208301856143b0565b6145676040830184614416565b949350505050565b600060608201905061458460008301866143b0565b61459160208301856143b0565b61459e60408301846144b0565b949350505050565b600060c0820190506145bb60008301876143b0565b6145c860208301866143bf565b6145d560808301856143b0565b6145e260a0830184614452565b95945050505050565b600060a0820190506146006000830188614425565b61460d60208301876144ce565b61461a6040830186614492565b61462760608301856144bf565b61463460808301846144bf565b9695505050505050565b60006020820190506146536000830184614434565b92915050565b600060208201905061466e6000830184614443565b92915050565b600060208201905061468960008301846144b0565b92915050565b60006080820190506146a460008301876144b0565b6146b160208301866143b0565b6146be60408301856143b0565b6146cb6060830184614452565b95945050505050565b60006146de6146ef565b90506146ea8282614947565b919050565b6000604051905090565b600067ffffffffffffffff82111561471457614713614add565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156147405761473f614add565b5b61474982614b25565b9050602081019050919050565b6000819050919050565b600060039050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b60006147a48261488c565b91506147af8361488c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156147e4576147e36149f2565b5b828201905092915050565b60006147fa8261488c565b91506148058361488c565b925082821015614818576148176149f2565b5b828203905092915050565b600061482e8261486c565b9050919050565b60008115159050919050565b6000819050919050565b600081905061485982614b36565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006148c5826148f0565b9050919050565b60006148d7826148f0565b9050919050565b60006148e98261484b565b9050919050565b60006148fb82614902565b9050919050565b600061490d8261486c565b9050919050565b60005b83811015614932578082015181840152602081019050614917565b83811115614941576000848401525b50505050565b61495082614b25565b810181811067ffffffffffffffff8211171561496f5761496e614add565b5b80604052505050565b60006149838261488c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156149b6576149b56149f2565b5b600182019050919050565b60006149cc8261488c565b91506149d78361488c565b9250826149e7576149e6614a21565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60048110614b4757614b46614a50565b5b50565b614b5381614823565b8114614b5e57600080fd5b50565b614b6a81614835565b8114614b7557600080fd5b50565b614b818161488c565b8114614b8c57600080fd5b5056fea2646970667358221220e5c45367cfac1f720a0cfe36fcc89c2262b8fb5192bf8b047395c912e3e812ed64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3242,
        "contract": "contracts/GameCard.sol:GameCard",
        "label": "s_addressInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Player)3180_storage)"
      },
      {
        "astId": 3248,
        "contract": "contracts/GameCard.sol:GameCard",
        "label": "s_requestIdToPlayers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_array(t_address)2_storage)"
      },
      {
        "astId": 3251,
        "contract": "contracts/GameCard.sol:GameCard",
        "label": "currentPlayers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3254,
        "contract": "contracts/GameCard.sol:GameCard",
        "label": "i_contractNftBox",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(NftBox)5533"
      },
      {
        "astId": 3261,
        "contract": "contracts/GameCard.sol:GameCard",
        "label": "i_contractCharacter",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(Characters)3143"
      },
      {
        "astId": 3263,
        "contract": "contracts/GameCard.sol:GameCard",
        "label": "s_gameCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3268,
        "contract": "contracts/GameCard.sol:GameCard",
        "label": "finshedGames",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Game)3187_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)2_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Characters)3143": {
        "encoding": "inplace",
        "label": "contract Characters",
        "numberOfBytes": "20"
      },
      "t_contract(NftBox)5533": {
        "encoding": "inplace",
        "label": "contract NftBox",
        "numberOfBytes": "20"
      },
      "t_enum(PlayerStatus)3166": {
        "encoding": "inplace",
        "label": "enum GameCard.PlayerStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Player)3180_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GameCard.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)3180_storage"
      },
      "t_mapping(t_uint256,t_array(t_address)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)2_storage"
      },
      "t_mapping(t_uint256,t_struct(Game)3187_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GameCard.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)3187_storage"
      },
      "t_struct(Game)3187_storage": {
        "encoding": "inplace",
        "label": "struct GameCard.Game",
        "members": [
          {
            "astId": 3182,
            "contract": "contracts/GameCard.sol:GameCard",
            "label": "winner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3184,
            "contract": "contracts/GameCard.sol:GameCard",
            "label": "loser",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3186,
            "contract": "contracts/GameCard.sol:GameCard",
            "label": "draw",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Player)3180_storage": {
        "encoding": "inplace",
        "label": "struct GameCard.Player",
        "members": [
          {
            "astId": 3168,
            "contract": "contracts/GameCard.sol:GameCard",
            "label": "game",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3170,
            "contract": "contracts/GameCard.sol:GameCard",
            "label": "player",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3174,
            "contract": "contracts/GameCard.sol:GameCard",
            "label": "tokenIdArray",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 3176,
            "contract": "contracts/GameCard.sol:GameCard",
            "label": "opponent",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 3179,
            "contract": "contracts/GameCard.sol:GameCard",
            "label": "status",
            "offset": 20,
            "slot": "5",
            "type": "t_enum(PlayerStatus)3166"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}